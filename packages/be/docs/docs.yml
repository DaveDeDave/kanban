openapi: 3.0.3
info:
  title: Kanban Documentation - OpenAPI 3.0
  description: |-
    This is the documentation of the backend of project kanban.
  license:
    name: MIT
  version: 1.0
servers:
  - url: http://localhost:8000/v1
  - url: https://be.projectkanban.workers.dev/v1
tags:
  - name: auth
    description: Authentication endpoints
  - name: user
    description: User endpoints
  - name: board
    description: Board endpoints
  - name: column
    description: Column endpoints
  - name: task
    description: Task endpoints
  - name: subtask
    description: Subtask endpoints
  - name: general
    description: General endpoints
paths:
  /healthcheck:
    get:
      tags:
        - general
      summary: Healthcheck endpoint  
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  worker-name:
                    type: string
                  environment:
                    type: string
                additionalProperties: false
  /auth/register:
    post:
      tags:
        - auth
      summary: Creates a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/User"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/Authenticated"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticates a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/LoginUser"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/Authenticated"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
  /user:
    delete:
      tags:
        - user
      summary: Deletes the current user
      responses:
        "204":
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
  /board:
    post:
      tags:
        - board
      summary: Creates a board
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/Board"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/Created"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    get:
      tags:
        - board
      summary: Gets all the boards of the current user
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Board"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
  /board/{boardId}:
    patch:
      tags:
        - board
      summary: Updates a board
      parameters:
        - name: boardId
          in: path
          description: Id of the board to update
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/Board"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    delete:
      tags:
        - board
      summary: Deletes a board
      parameters:
        - name: boardId
          in: path
          description: Id of the board to delete
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
  /column:
    post:
      tags:
        - column
      summary: Creates a column
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/Column"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/Created"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    get:
      tags:
        - column
      summary: Gets all the columns of the specified board
      parameters:
        - name: boardId
          in: query
          description: Id of the board
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Board"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []

  /column/{columnId}:
    patch:
      tags:
        - column
      summary: Updates a column
      parameters:
        - name: columnId
          in: path
          description: Id of the column to delete
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/UpdateColumn"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    delete:
      tags:
        - column
      summary: Deletes a column
      parameters:
        - name: columnId
          in: path
          description: Id of the column to delete
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
  /task:
    post:
      tags:
        - task
      summary: Creates a task
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/CreateTask"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/Created"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    get:
      tags:
        - task
      summary: Gets all tasks of the specified column
      parameters:
        - name: columnId
          in: query
          description: Id of the column
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Task"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
  /task/{taskId}:
    patch:
      tags:
        - task
      summary: Updates a task
      parameters:
        - name: taskId
          in: path
          description: Id of the task to be updated
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/UpdateTask"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    delete:
      tags:
        - task
      summary: Deletes a task
      parameters:
        - name: taskId
          in: path
          description: Id of the task to be deleted
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    get:
      tags:
        - task
      summary: Gets a task
      parameters:
        - name: taskId
          in: path
          description: Id of the task to be deleted
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Task" 
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
  /subtask:
    post:
      tags:
        - subtask
      summary: Creates a subtask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/CreateSubtask"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/Created"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    get:
      tags:
        - subtask
      summary: Gets all subtask of the specified task
      parameters:
        - name: taskId
          in: query
          description: Id of the task
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Subtask"
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
  /subtask/${subtaskId}:
    patch:
      tags:
        - subtask
      summary: Update a subtask
      parameters:
        - name: subtaskId
          in: path
          description: Id of the subtask
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/UpdateSubtask"
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
    delete:
      tags:
        - subtask
      summary: Deletes a subtask
      parameters:
        - name: subtaskId
          in: path
          description: Id of the subtask
          required: true
          schema:
            type: string
            example: 638a357683d9bcda990a92a5
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#components/responseBodies/ErrorResponse"
      security:
        - bearerAuth: []
components:
  schemas:
    User:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email
          format: email
          example: user@test.com
        password:
          type: string
          description: User's password
          pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
          example: Password12.
      additionalProperties: false
    Board:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Board's name
          example: QA Team
      additionalProperties: false
    Column:
      type: object
      required:
        - boardId
        - name
      properties:
        boardId:
          type: string
          description: id of the board which the column belongs
          example: 638a357683d9bcda990a92a5
        name:
          type: string
          description: Column's name
          example: Next week
        color:
          type: string
          description: Column's tag color
          pattern: /^#[(a|b|c|d|e|f)|0-9]{6}$/
          example: #457b9d
      additionalProperties: false
    Task:
      type: object
      required:
        - boardId
        - columnId
        - title
        - description
      properties:
        boardId:
          type: string
          description: id of the board which the task belongs
          example: 638a357683d9bcda990a92a5
        columnId:
          type: string
          description: id of the column which the task belongs
          example: 638a357683d9bcda990a92a5
        title:
          type: string
          description: Task's title
          example: Install Node.js
        description:
          type: string
          description: Task's description
          example: We need to install the latest version of Node.js
        status:
          type: string
          description: Task's current status
          example: TODO
          enum:
            - TODO
            - DOING
            - COMPLETED
      additionalProperties: false
    Subtask:
      type: object
      required:
        - boardId
        - columnId
        - taskId
        - description
        - completed
      properties:
        boardId:
          type: string
          description: id of the board which the subtask belongs
          example: 638a357683d9bcda990a92a5
        columnId:
          type: string
          description: id of the column which the subtask belongs
          example: 638a357683d9bcda990a92a5
        taskId:
          type: string
          description: id of the task which the subtask belongs
          example: 638a357683d9bcda990a92a5
        description:
          type: string
          description: Subtask's description
          example: Download the latest version of Node.js
        completed:
          type: boolean
          description: Specifies if the subtask is completed or not
      additionalProperties: false
  requestBodies:
    LoginUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email
          format: email
          example: user@test.com
        password:
          type: string
          description: User's password
          example: Password12.
      additionalProperties: false
    UpdateColumn:
      type: object
      anyOf:
        - required:
            - name
        - required:
            - color
      properties:
        boardId:
          type: string
          description: id of the board which the column belongs
          example: 638a357683d9bcda990a92a5
        name:
          type: string
          description: Column's name
          example: Next week
        color:
          type: string
          description: Column's tag color
          pattern: /^#[(a|b|c|d|e|f)|0-9]{6}$/
          example: #457b9d
      additionalProperties: false
    CreateTask:
      type: object
      required:
        - columnId
        - title
        - description
        - status
      properties:
        columnId:
          type: string
          description: id of the column which the task belongs
          example: 638a357683d9bcda990a92a5
        title:
          type: string
          description: Task's title
          example: Install Node.js
        description:
          type: string
          description: Task's description
          example: We need to install the latest version of Node.js
        status:
          type: string
          description: Task's current status
          example: TODO
          enum:
            - TODO
            - DOING
            - COMPLETED
        additionalProperties: false
    UpdateTask:
      type: object
      anyOf:
        - required:
          - title
        - required:
          - description
        - required:
          - status
      properties:
        title:
          type: string
          description: Task's title
          example: Install Node.js
        description:
          type: string
          description: Task's description
          example: We need to install the latest version of Node.js
        status:
          type: string
          description: Task's current status
          example: TODO
          enum:
            - TODO
            - DOING
            - COMPLETED
        additionalProperties: false
    CreateSubtask:
      type: object
      required:
        - taskId
        - description
        - completed
      properties:
        taskId:
          type: string
          description: id of the task which the subtask belongs
          example: 638a357683d9bcda990a92a5
        description:
          type: string
          description: Subtask's description
          example: Download the latest version of Node.js
        completed:
          type: boolean
          description: Specifies if the subtask is completed or not
      additionalProperties: false
    UpdateSubtask:
      type: object
      anyOf:
        - required:
          - description
        - required:
          - completed
      properties:
        description:
          type: string
          description: Subtask's description
          example: Download the latest version of Node.js
        completed:
          type: boolean
          description: Specifies if the subtask is completed or not
      additionalProperties: false
  responseBodies:
    Authenticated:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: JWT token
      additionalProperties: false
    Created:
      type: object
      required:
        - insertedId
      properties:
        insertedId:
          type: string
          description: Id of the created item
          example: 638a357683d9bcda990a92a5
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Code that identifies the error
          example: error.something
        message:
          type: string
          description: Detailed description of the error
          example: some error occurred
      additionalProperties: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
security:
  - bearerAuth: []
