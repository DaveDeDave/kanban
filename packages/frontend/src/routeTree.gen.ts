/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as AppImport } from './routes/app'
import { Route as PublicImport } from './routes/_public'
import { Route as AppBoardsImport } from './routes/app/boards'
import { Route as AppBoardsBoardIdImport } from './routes/app/boards/$boardId'

// Create Virtual Routes

const AppIndexLazyImport = createFileRoute('/app/')()
const PublicIndexLazyImport = createFileRoute('/_public/')()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const PublicAboutLazyImport = createFileRoute('/_public/about')()
const AppSettingsIndexLazyImport = createFileRoute('/app/settings/')()
const AppBoardsIndexLazyImport = createFileRoute('/app/boards/')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexLazyRoute = AppIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./routes/app/index.lazy').then((d) => d.Route))

const PublicIndexLazyRoute = PublicIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/index.lazy').then((d) => d.Route))

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const PublicAboutLazyRoute = PublicAboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/about.lazy').then((d) => d.Route))

const AppBoardsRoute = AppBoardsImport.update({
  id: '/boards',
  path: '/boards',
  getParentRoute: () => AppRoute,
} as any)

const AppSettingsIndexLazyRoute = AppSettingsIndexLazyImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRoute,
} as any).lazy(() =>
  import('./routes/app/settings/index.lazy').then((d) => d.Route),
)

const AppBoardsIndexLazyRoute = AppBoardsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppBoardsRoute,
} as any).lazy(() =>
  import('./routes/app/boards/index.lazy').then((d) => d.Route),
)

const AppBoardsBoardIdRoute = AppBoardsBoardIdImport.update({
  id: '/$boardId',
  path: '/$boardId',
  getParentRoute: () => AppBoardsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/app/boards': {
      id: '/app/boards'
      path: '/boards'
      fullPath: '/app/boards'
      preLoaderRoute: typeof AppBoardsImport
      parentRoute: typeof AppImport
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutLazyImport
      parentRoute: typeof PublicImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof AuthImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof AuthImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexLazyImport
      parentRoute: typeof PublicImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexLazyImport
      parentRoute: typeof AppImport
    }
    '/app/boards/$boardId': {
      id: '/app/boards/$boardId'
      path: '/$boardId'
      fullPath: '/app/boards/$boardId'
      preLoaderRoute: typeof AppBoardsBoardIdImport
      parentRoute: typeof AppBoardsImport
    }
    '/app/boards/': {
      id: '/app/boards/'
      path: '/'
      fullPath: '/app/boards/'
      preLoaderRoute: typeof AppBoardsIndexLazyImport
      parentRoute: typeof AppBoardsImport
    }
    '/app/settings/': {
      id: '/app/settings/'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsIndexLazyImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface PublicRouteChildren {
  PublicAboutLazyRoute: typeof PublicAboutLazyRoute
  PublicIndexLazyRoute: typeof PublicIndexLazyRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAboutLazyRoute: PublicAboutLazyRoute,
  PublicIndexLazyRoute: PublicIndexLazyRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

interface AppBoardsRouteChildren {
  AppBoardsBoardIdRoute: typeof AppBoardsBoardIdRoute
  AppBoardsIndexLazyRoute: typeof AppBoardsIndexLazyRoute
}

const AppBoardsRouteChildren: AppBoardsRouteChildren = {
  AppBoardsBoardIdRoute: AppBoardsBoardIdRoute,
  AppBoardsIndexLazyRoute: AppBoardsIndexLazyRoute,
}

const AppBoardsRouteWithChildren = AppBoardsRoute._addFileChildren(
  AppBoardsRouteChildren,
)

interface AppRouteChildren {
  AppBoardsRoute: typeof AppBoardsRouteWithChildren
  AppIndexLazyRoute: typeof AppIndexLazyRoute
  AppSettingsIndexLazyRoute: typeof AppSettingsIndexLazyRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppBoardsRoute: AppBoardsRouteWithChildren,
  AppIndexLazyRoute: AppIndexLazyRoute,
  AppSettingsIndexLazyRoute: AppSettingsIndexLazyRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/boards': typeof AppBoardsRouteWithChildren
  '/about': typeof PublicAboutLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/': typeof PublicIndexLazyRoute
  '/app/': typeof AppIndexLazyRoute
  '/app/boards/$boardId': typeof AppBoardsBoardIdRoute
  '/app/boards/': typeof AppBoardsIndexLazyRoute
  '/app/settings': typeof AppSettingsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/auth': typeof AuthRouteWithChildren
  '/about': typeof PublicAboutLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/': typeof PublicIndexLazyRoute
  '/app': typeof AppIndexLazyRoute
  '/app/boards/$boardId': typeof AppBoardsBoardIdRoute
  '/app/boards': typeof AppBoardsIndexLazyRoute
  '/app/settings': typeof AppSettingsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_public': typeof PublicRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/app/boards': typeof AppBoardsRouteWithChildren
  '/_public/about': typeof PublicAboutLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/_public/': typeof PublicIndexLazyRoute
  '/app/': typeof AppIndexLazyRoute
  '/app/boards/$boardId': typeof AppBoardsBoardIdRoute
  '/app/boards/': typeof AppBoardsIndexLazyRoute
  '/app/settings/': typeof AppSettingsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/app'
    | '/auth'
    | '/app/boards'
    | '/about'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/app/'
    | '/app/boards/$boardId'
    | '/app/boards/'
    | '/app/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/about'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/app'
    | '/app/boards/$boardId'
    | '/app/boards'
    | '/app/settings'
  id:
    | '__root__'
    | '/_public'
    | '/app'
    | '/auth'
    | '/app/boards'
    | '/_public/about'
    | '/auth/login'
    | '/auth/register'
    | '/_public/'
    | '/app/'
    | '/app/boards/$boardId'
    | '/app/boards/'
    | '/app/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PublicRoute: typeof PublicRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRouteWithChildren,
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_public",
        "/app",
        "/auth"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/about",
        "/_public/"
      ]
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/boards",
        "/app/",
        "/app/settings/"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/login",
        "/auth/register"
      ]
    },
    "/app/boards": {
      "filePath": "app/boards.tsx",
      "parent": "/app",
      "children": [
        "/app/boards/$boardId",
        "/app/boards/"
      ]
    },
    "/_public/about": {
      "filePath": "_public/about.lazy.tsx",
      "parent": "/_public"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx",
      "parent": "/auth"
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx",
      "parent": "/auth"
    },
    "/_public/": {
      "filePath": "_public/index.lazy.tsx",
      "parent": "/_public"
    },
    "/app/": {
      "filePath": "app/index.lazy.tsx",
      "parent": "/app"
    },
    "/app/boards/$boardId": {
      "filePath": "app/boards/$boardId.tsx",
      "parent": "/app/boards"
    },
    "/app/boards/": {
      "filePath": "app/boards/index.lazy.tsx",
      "parent": "/app/boards"
    },
    "/app/settings/": {
      "filePath": "app/settings/index.lazy.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
